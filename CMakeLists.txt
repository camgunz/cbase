PROJECT("CBase" C)

CMAKE_MINIMUM_REQUIRED(VERSION 2.8.0 FATAL_ERROR)

INCLUDE(CheckCCompilerFlag)

IF(${CMAKE_BINARY_DIR} STREQUAL ${CMAKE_SOURCE_DIR})
  MESSAGE(FATAL_ERROR "Cannot build source in-tree.")
ENDIF()

IF((NOT DEFINED CMAKE_BUILD_TYPE) OR (CMAKE_BUILD_TYPE STREQUAL ""))
  SET(CMAKE_BUILD_TYPE Release)
  SET(DEBUGGING FALSE)
ENDIF()

IF(CMAKE_BUILD_TYPE STREQUAL "Release")
  SET(DEBUGGING FALSE)
ELSEIF(CMAKE_BUILD_TYPE STREQUAL "Debug")
  SET(DEBUGGING TRUE)
ELSE()
  MESSAGE(FATAL_ERROR "Unknown build type ${CMAKE_BUILD_TYPE}")
ENDIF()

SET(CMAKE_MODULE_PATH ${CMAKE_SOURCE_DIR}/cmake/modules)

SET(VERSION "0")
SET(PACKAGE "CBase")
SET(PACKAGE_NAME "CBase")
SET(PACKAGE_VERSION "${VERSION}")
SET(PACKAGE_STRING "${PACKAGE_NAME} v${PACKAGE_VERSION}")
SET(PACKAGE_TARNAME "cbase")
SET(PACKAGE_URL "http://github.com/camgunz/cbase")

IF(CMAKE_C_COMPILER_ID STREQUAL "Clang")
  SET(CLANG TRUE)
ELSE()
  SET(CLANG FALSE)
ENDIF()

IF(CMAKE_C_COMPILER_ID STREQUAL "GNU")
  SET(GCC TRUE)
ELSE()
  SET(GCC FALSE)
ENDIF()

IF(CLANG OR GCC)
  SET(GCC_OR_CLANG TRUE)
ELSE()
  SET(GCC_OR_CLANG FALSE)
ENDIF()

FUNCTION(ADD_CFLAG flag flag_supported)
  CHECK_C_COMPILER_FLAG(${flag} ${flag_supported})
  IF(${flag_supported})
    SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${flag}" PARENT_SCOPE)
  ENDIF()
ENDFUNCTION(ADD_CFLAG flag flag_supported)

CHECK_C_COMPILER_FLAG(-std=c99 C99_SUPPORTED)
IF(${C99_SUPPORTED})
  SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -std=c99")
ENDIF()

ADD_CFLAG(-march=native ARCH_NATIVE_SUPPORTED)
ADD_CFLAG(-Wextra WARN_EXTRA_SUPPORTED)
ADD_CFLAG(-Wall WARN_ALL_SUPPORTED)

IF(DEBUGGING)
  IF(GCC)
    ADD_CFLAG(-fstack-check STACK_CHECK_SUPPORTED)
    ADD_CFLAG(-pedantic-errors PEDANTIC_SUPPORTED)
  ELSEIF(CLANG)
    ADD_CFLAG(-Werror WARNINGS_ARE_ERRORS_SUPPORTED)
    ADD_CFLAG(-fsanitize=address ASAN_SUPPORTED)
    # ADD_CFLAG(-fsanitize=address,thread,undefined
    #   ADDRESS_THREAD_UB_SANITIZATION_SUPPORTED)
  ENDIF()
  ADD_CFLAG(-fstack-protector-all STACK_PROTECTOR_ALL_SUPPORTED)
  ADD_CFLAG(-ftrapv TRAPV_SUPPORTED)
  ADD_CFLAG(-fbounds-checking BOUNDS_CHECKING_SUPPORTED)
  ADD_CFLAG(-O0 O0_SUPPORTED)
ELSE()
  ADD_CFLAG(-O3 O3_SUPPORTED)
ENDIF()

FIND_PACKAGE(UTF8Proc REQUIRED)
INCLUDE_DIRECTORIES(${UTF8PROC_INCLUDE_DIR})

FIND_PACKAGE(MPDecimal REQUIRED)
INCLUDE_DIRECTORIES(${MPDECIMAL_INCLUDE_DIR})

FIND_PACKAGE(Cmocka REQUIRED)
INCLUDE_DIRECTORIES(${CMOCKA_INCLUDE_DIR})

INCLUDE_DIRECTORIES(${CMAKE_BINARY_DIR})

IF(GCC_OR_CLANG)
  ADD_DEFINITIONS(-D_GNU_SOURCE)
ENDIF()

INCLUDE_DIRECTORIES(${CMAKE_SOURCE_DIR}/src)

SET(LIBCBASE_SOURCE_FILES
  ${CMAKE_SOURCE_DIR}/src/alloc.c
  ${CMAKE_SOURCE_DIR}/src/array.c
  ${CMAKE_SOURCE_DIR}/src/buffer.c
  ${CMAKE_SOURCE_DIR}/src/list.c
  ${CMAKE_SOURCE_DIR}/src/log.c
  ${CMAKE_SOURCE_DIR}/src/parray.c
  ${CMAKE_SOURCE_DIR}/src/rune.c
  ${CMAKE_SOURCE_DIR}/src/slice.c
  ${CMAKE_SOURCE_DIR}/src/sslice.c
  ${CMAKE_SOURCE_DIR}/src/status.c
  ${CMAKE_SOURCE_DIR}/src/str.c
  ${CMAKE_SOURCE_DIR}/src/table.c
  ${CMAKE_SOURCE_DIR}/src/utf8.c
  ${CMAKE_SOURCE_DIR}/src/xxhash.c
)

SET(LIBCBASE_LIBRARIES
  ${UTF8PROC_LIBRARIES}
  ${MPDECIMAL_LIBRARIES}
)

SET(CBASETEST_LIBRARIES ${LIBCBASE_LIBRARIES}
  ${CMOCKA_LIBRARIES}
)

ADD_LIBRARY(cbase SHARED ${LIBCBASE_SOURCE_FILES})
ADD_LIBRARY(cbasestatic STATIC ${LIBCBASE_SOURCE_FILES})

SET_TARGET_PROPERTIES(cbasestatic PROPERTIES OUTPUT_NAME cbase)

TARGET_LINK_LIBRARIES(cbase ${LIBCBASE_LIBRARIES})
TARGET_LINK_LIBRARIES(cbasestatic ${LIBCBASE_LIBRARIES})

ADD_EXECUTABLE(cbase_test ${LIBCBASE_SOURCE_FILES}
  ${CMAKE_SOURCE_DIR}/test/main.c
)
TARGET_LINK_LIBRARIES(cbase_test ${CBASETEST_LIBRARIES})

IF(DEBUGGING)
  IF(CLANG)
    ADD_CFLAG(--coverage COVERAGE_SUPPORTED)
  ELSEIF(GCC)
    SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -fprofile-arcs -ftest-coverage")
    # ADD_CFLAG(--coverage COVERAGE_SUPPORTED)
  ENDIF()
ENDIF()

IF((NOT DEFINED BIN_DIR) OR (BIN_DIR STREQUAL ""))
  SET(BIN_DIR "${PREFIX}/bin")
ENDIF()

IF((NOT DEFINED LIB_DIR) OR (LIB_DIR STREQUAL ""))
  SET(LIB_DIR "${PREFIX}/lib")
ENDIF()

IF((NOT DEFINED INCLUDE_DIR) OR (INCLUDE_DIR STREQUAL ""))
  SET(INCLUDE_DIR "${PREFIX}/include")
ENDIF()

IF((NOT DEFINED SHARE_DIR) OR (SHARE_DIR STREQUAL ""))
  SET(SHARE_DIR "${PREFIX}/share")
ENDIF()

SET(INCLUDE_FILES
  ${CMAKE_SOURCE_DIR}/src/cbase/alloc.h
  ${CMAKE_SOURCE_DIR}/src/cbase/array.h
  ${CMAKE_SOURCE_DIR}/src/cbase/buffer.h
  ${CMAKE_SOURCE_DIR}/src/cbase/decimal.h
  ${CMAKE_SOURCE_DIR}/src/cbase/errors.h
  ${CMAKE_SOURCE_DIR}/src/cbase/hash.h
  ${CMAKE_SOURCE_DIR}/src/cbase/list.h
  ${CMAKE_SOURCE_DIR}/src/cbase/log.h
  ${CMAKE_SOURCE_DIR}/src/cbase/parray.h
  ${CMAKE_SOURCE_DIR}/src/cbase/rune.h
  ${CMAKE_SOURCE_DIR}/src/cbase/slice.h
  ${CMAKE_SOURCE_DIR}/src/cbase/sslice.h
  ${CMAKE_SOURCE_DIR}/src/cbase/status.h
  ${CMAKE_SOURCE_DIR}/src/cbase/str.h
  ${CMAKE_SOURCE_DIR}/src/cbase/table.h
  ${CMAKE_SOURCE_DIR}/src/cbase/utf8.h
  ${CMAKE_SOURCE_DIR}/src/cbase/xxhash.h
)

SET(INCLUDE_FILES ${INCLUDE_FILES} ${CMAKE_SOURCE_DIR}/src/cbase.h)

INSTALL(
  TARGETS cbase
  RUNTIME DESTINATION ${BIN_DIR}
  LIBRARY DESTINATION ${LIB_DIR}
  ARCHIVE DESTINATION ${LIB_DIR}
)

INSTALL(
  FILES ${INCLUDE_FILES}
  DESTINATION ${INCLUDE_DIR}/cbase
)

INSTALL(
  FILES ${CMAKE_SOURCE_DIR}/src/cbase.h
  DESTINATION ${INCLUDE_DIR}
)

# vi: ai:ts=2:sw=2:et

